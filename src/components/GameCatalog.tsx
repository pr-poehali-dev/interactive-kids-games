import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import Icon from '@/components/ui/icon';
import ShareDialog from './ShareDialog';

const GameCatalog = () => {
  const [searchQuery, setSearchQuery] = useState('');
  const [shareDialogOpen, setShareDialogOpen] = useState(false);
  const [selectedGame, setSelectedGame] = useState<{id: number, title: string} | null>(null);

  const games = [
    {
      id: 1,
      title: '–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞',
      type: '–í–∏–∫—Ç–æ—Ä–∏–Ω–∞',
      emoji: 'üéØ',
      questions: 15,
      difficulty: '–õ–µ–≥–∫–∏–π',
      category: '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞',
      description: '–í–µ—Å–µ–ª–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ —Å –∑–∞–¥–∞—á–∞–º–∏ –Ω–∞ —Å–ª–æ–∂–µ–Ω–∏–µ –∏ –≤—ã—á–∏—Ç–∞–Ω–∏–µ –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–π —à–∫–æ–ª—ã'
    },
    {
      id: 2,
      title: '–ò—Å—Ç–æ—Ä–∏—è –†–æ—Å—Å–∏–∏',
      type: '–ú–∏–ª–ª–∏–æ–Ω–µ—Ä',
      emoji: 'üí∞',
      questions: 15,
      difficulty: '–°–ª–æ–∂–Ω—ã–π',
      category: '–ò—Å—Ç–æ—Ä–∏—è',
      description: '–ü—Ä–æ–π–¥–∏ –ø—É—Ç—å –∫ –º–∏–ª–ª–∏–æ–Ω—É, –æ—Ç–≤–µ—á–∞—è –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏'
    },
    {
      id: 3,
      title: '–ù–∞–π–¥–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö',
      type: '–ù–∞–π–¥–∏ —Å–ª–æ–≤–æ',
      emoji: 'üî§',
      questions: 12,
      difficulty: '–õ–µ–≥–∫–∏–π',
      category: '–ü—Ä–∏—Ä–æ–¥–∞',
      description: '–ò—â–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∂–∏–≤–æ—Ç–Ω—ã—Ö –≤ —Å–µ—Ç–∫–µ –±—É–∫–≤ –∏ —Ä–∞–∑–≤–∏–≤–∞–π –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å'
    },
    {
      id: 4,
      title: '–°—Ç–æ–ª–∏—Ü—ã –∏ —Å—Ç—Ä–∞–Ω—ã',
      type: '–ù–∞–π—Ç–∏ –ø–∞—Ä—É',
      emoji: 'üé¥',
      questions: 20,
      difficulty: '–°—Ä–µ–¥–Ω–∏–π',
      category: '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è',
      description: '–°–æ–ø–æ—Å—Ç–∞–≤—å —Å—Ç–æ–ª–∏—Ü—ã —Å –∏—Ö —Å—Ç—Ä–∞–Ω–∞–º–∏ –≤ —ç—Ç–æ–π —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–π –∏–≥—Ä–µ'
    },
    {
      id: 5,
      title: '–°–æ–±—ã—Ç–∏—è XX –≤–µ–∫–∞',
      type: '–•—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ª–∏–Ω–µ–π–∫–∞',
      emoji: 'üìÖ',
      questions: 10,
      difficulty: '–°–ª–æ–∂–Ω—ã–π',
      category: '–ò—Å—Ç–æ—Ä–∏—è',
      description: '–†–∞—Å—Å—Ç–∞–≤—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ'
    },
    {
      id: 6,
      title: '–ñ–∏–≤–æ—Ç–Ω—ã–µ –º–∏—Ä–∞',
      type: '–ü–∞–∑–ª',
      emoji: 'üß©',
      questions: 20,
      difficulty: '–°—Ä–µ–¥–Ω–∏–π',
      category: '–ü—Ä–∏—Ä–æ–¥–∞',
      description: '–°–æ–±–µ—Ä–∏ –ø–∞–∑–ª—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏ —É–∑–Ω–∞–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã'
    },
    {
      id: 7,
      title: '–†–∞—Å–∫—Ä–∞—Å–∫–∞ –±—É–∫–≤',
      type: '–†–∞—Å–∫—Ä–∞—Å–∫–∞',
      emoji: 'üé®',
      questions: 33,
      difficulty: '–õ–µ–≥–∫–∏–π',
      category: '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫',
      description: '–£—á–∏–º –∞–ª—Ñ–∞–≤–∏—Ç —á–µ—Ä–µ–∑ —Ä–∞—Å–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –±—É–∫–≤ –∏ –∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω—ã–µ –æ–±—Ä–∞–∑—ã'
    },
    {
      id: 8,
      title: '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è –†–æ—Å—Å–∏–∏',
      type: '–¢–µ—Å—Ç',
      emoji: 'üìù',
      questions: 25,
      difficulty: '–°–ª–æ–∂–Ω—ã–π',
      category: '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è',
      description: '–ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –æ –≥–æ—Ä–æ–¥–∞—Ö, —Ä–µ–∫–∞—Ö –∏ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è—Ö –†–æ—Å—Å–∏–∏'
    },
    {
      id: 9,
      title: '–ê–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞',
      type: '–í–∏–∫—Ç–æ—Ä–∏–Ω–∞',
      emoji: 'üéØ',
      questions: 30,
      difficulty: '–°—Ä–µ–¥–Ω–∏–π',
      category: '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π',
      description: '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤'
    }
  ];

  const filteredGames = games.filter(game =>
    game.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
    game.category.toLowerCase().includes(searchQuery.toLowerCase())
  );

  const getDifficultyColor = (difficulty: string) => {
    switch(difficulty) {
      case '–õ–µ–≥–∫–∏–π': return 'bg-green-100 text-green-700';
      case '–°—Ä–µ–¥–Ω–∏–π': return 'bg-yellow-100 text-yellow-700';
      case '–°–ª–æ–∂–Ω—ã–π': return 'bg-red-100 text-red-700';
      default: return 'bg-gray-100 text-gray-700';
    }
  };

  return (
    <div className="space-y-6 animate-fade-in">
      <div className="space-y-4">
        <div>
          <h2 className="text-3xl font-bold">–ö–∞—Ç–∞–ª–æ–≥ –∏–≥—Ä</h2>
          <p className="text-muted-foreground">–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞–∫ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ</p>
        </div>

        <div className="relative max-w-md">
          <Icon name="Search" size={18} className="absolute left-3 top-3 text-muted-foreground" />
          <Input
            placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="pl-10"
          />
        </div>
      </div>

      <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
        {filteredGames.map((game, idx) => (
          <Card 
            key={game.id} 
            className="p-6 space-y-4 hover:shadow-lg transition-all duration-300 hover:-translate-y-1 animate-scale-in"
            style={{animationDelay: `${idx * 0.05}s`}}
          >
            <div className="flex items-start justify-between">
              <div className="w-14 h-14 rounded-xl bg-gradient-to-br from-primary/20 to-accent/20 flex items-center justify-center text-3xl">
                {game.emoji}
              </div>
              <Badge variant="outline">{game.type}</Badge>
            </div>

            <div className="space-y-2">
              <h3 className="text-xl font-semibold">{game.title}</h3>
              <p className="text-sm text-muted-foreground">{game.description}</p>
            </div>

            <div className="flex gap-2 flex-wrap">
              <Badge className={getDifficultyColor(game.difficulty)}>
                {game.difficulty}
              </Badge>
              <Badge variant="secondary">
                <Icon name="Book" size={12} className="mr-1" />
                {game.category}
              </Badge>
              <Badge variant="secondary">
                <Icon name="HelpCircle" size={12} className="mr-1" />
                {game.questions} –≤–æ–ø—Ä–æ—Å–æ–≤
              </Badge>
            </div>

            <div className="flex gap-2 pt-2">
              <Button className="flex-1 gap-2">
                <Icon name="Play" size={16} />
                –û—Ç–∫—Ä—ã—Ç—å
              </Button>
              <Button 
                variant="outline" 
                size="icon"
                onClick={() => {
                  setSelectedGame({id: game.id, title: game.title});
                  setShareDialogOpen(true);
                }}
              >
                <Icon name="Share2" size={16} />
              </Button>
            </div>
          </Card>
        ))}
      </div>

      {filteredGames.length === 0 && (
        <div className="text-center py-12">
          <div className="text-6xl mb-4">üîç</div>
          <h3 className="text-xl font-semibold mb-2">–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</h3>
          <p className="text-muted-foreground">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å</p>
        </div>
      )}

      {selectedGame && (
        <ShareDialog
          open={shareDialogOpen}
          onClose={() => {
            setShareDialogOpen(false);
            setSelectedGame(null);
          }}
          gameTitle={selectedGame.title}
          gameId={selectedGame.id}
        />
      )}
    </div>
  );
};

export default GameCatalog;